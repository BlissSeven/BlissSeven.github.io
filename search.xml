<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>object_model</title>
      <link href="/2019/07/13/object-model/"/>
      <url>/2019/07/13/object-model/</url>
      
        <content type="html"><![CDATA[<ul><li>底层实现</li><li>深度探索C++对象模型</li></ul><p>+<a id="more"></a></p><h1 id="C-对象模型探索"><a href="#C-对象模型探索" class="headerlink" title="C++对象模型探索"></a>C++对象模型探索</h1><h2 id="1-类对象占用的空间"><a href="#1-类对象占用的空间" class="headerlink" title="1. 类对象占用的空间"></a>1. 类对象占用的空间</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line">A a;</span><br><span class="line"><span class="comment">//sizeof(A)=sizeof(a)=1;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">A a;</span><br><span class="line"><span class="keyword">sizeof</span>(A)=<span class="keyword">sizeof</span>(a)=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//sizeof(a)=1; 1 为char num的内存空间</span></span><br><span class="line"><span class="comment">//&amp;a=&amp;a.num</span></span><br><span class="line"><span class="comment">//a地址中的数为q</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//sizeof(a)=4; 4 为int num的内存空间</span></span><br></pre></td></tr></table></figure><ul><li>类成员函数不占用类对象的内存空间</li><li>空类大小为1个字节,空类存在首地址</li><li>成员变量包含在每个对象中，占用类对象的内存空间</li><li>成员函数 跟着类走，不是类对象，不管类产生了多少个类对象</li></ul><h2 id="2-对象结构的发展和演化"><a href="#2-对象结构的发展和演化" class="headerlink" title="2. 对象结构的发展和演化"></a>2. 对象结构的发展和演化</h2><ul><li>非静态的成员变量（普通成员变量）跟着类对象走（存在类对象内部），每个类对象都有自己的成员变量</li><li>静态成员变量和对象没关系，不会保存在类对象内部，保存在对象外面</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sa;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(A)=<span class="number">4</span>=<span class="keyword">sizeof</span>(a.num)</span><br></pre></td></tr></table></figure><ul><li>成员函数无论静态函数非静态保存在类对象外部，都不占用类对象</li><li>存在虚函数，类对象多占4个字节</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sa;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sb;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(a)=<span class="number">4</span>+<span class="number">4</span>=<span class="number">8</span>;</span><br></pre></td></tr></table></figure><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><ul><li>类里只要有一个虚函数，这个类A产生一个指向虚函数表的指针，四个字节</li><li>一个虚函数对应一个指针，这些指针放到虚函数表里 virtual table VTBL</li><li>虚函数表基于类，而不是类对象</li><li>类对象。虚函数存在，系统在类对象中添加了一个 指针VPTR，指向虚函数表</li><li>VPTR由编译器适当时机添加（比如 构造函数）</li></ul><hr><ul><li>静态数据成员不计算在类对象的sizeof中</li><li>普通成员函数和静态成员函数不计算在类对象的sizeof中</li><li>虚函数不计算在类对象的sizeof中，但是虚函数会让类对象sizeof增加4个字节，容纳虚函数表指针。</li><li>VTBL基于类，和对象没有关系，不是基于对象的</li><li>如果有多个数据成员，为了提高访问速度，某些编译器可能将数据成员之间的内存占用比例进行调整，存在内存字节对齐问题。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> integer;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(a)=<span class="number">8</span>;<span class="comment">//4个字节对齐</span></span><br></pre></td></tr></table></figure><ul><li>不管什么类型指针，这个指针的占用内存固定 比如4个字节<ul><li>非静态成员变量和内存对齐</li><li>虚函数表指针</li></ul></li></ul><h2 id="3-This指针调整"><a href="#3-This指针调整" class="headerlink" title="3. This指针调整"></a>3. This指针调整</h2><ul><li>存在多重继承</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">A() &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;A= %p \n"</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;A= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sa;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">B() &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;B= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;B= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span><span class="keyword">public</span> A,<span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">C()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;C= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;C= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">C myc;</span><br><span class="line">myc.funcA();<span class="comment">//</span></span><br><span class="line">myc.funcB();<span class="comment">//</span></span><br><span class="line">myc.funcC();<span class="comment">//</span></span><br><span class="line"><span class="comment">//&amp;A= 006FFC44</span></span><br><span class="line"><span class="comment">//&amp;B= 006FFC48</span></span><br><span class="line"><span class="comment">//&amp;C= 006FFC44</span></span><br><span class="line"><span class="comment">//&amp;A= 006FFC44</span></span><br><span class="line"><span class="comment">//&amp;B= 006FFC48</span></span><br><span class="line"><span class="comment">//&amp;C= 006FFC44</span></span><br><span class="line"><span class="comment">//&amp;C=&amp;A</span></span><br></pre></td></tr></table></figure><ul><li><p>派生类对象是包含基类子对象的</p></li><li><p>如果派生类只从一个类派生的，派生类对象地址和基类子对象的地址相同</p></li><li><p>如果继承多个，第一个基类子对象的开始地址和派生类对象开始地址相同，后续这类基类子对象的开始地址和派生类对象的开始地址相差多少</p><ul><li>把第一个<strong>基类子对象</strong>所占用的地址</li></ul></li><li><p>如果C类覆盖B中方法，C中调用B中方法时，this指针不变</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">A() &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;A= %p \n"</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;A= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sa;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">B() &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;B= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;B= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span><span class="keyword">public</span> A,<span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">C()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;C= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;C= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;C B= %p \n"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">C myc;</span><br><span class="line">myc.funcA();</span><br><span class="line">myc.funcB();</span><br><span class="line">myc.B::funcB();</span><br><span class="line">myc.funcC();</span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//0</span></span><br></pre></td></tr></table></figure><hr><ul><li>调用哪个子类的成员函数，这个this指针就会被调整到对象子类的开始地址</li></ul><h2 id="4-分析obj-构造函数语义"><a href="#4-分析obj-构造函数语义" class="headerlink" title="4. 分析obj,构造函数语义"></a>4. 分析obj,构造函数语义</h2><ul><li>默认构造函数，没有参数的构造函数</li><li>如果没有定义任何构造函数，编译器就会隐式提供默认构造函数，即合成的默认构造函数</li><li><strong>合成的默认构造函数，只有在必要的时候，编译器才会为我们提供，而不是必然</strong></li></ul><ul><li>每个CPP编译生成一个.obj(.o)文件 linux -c，最终把很多obj文件链接到一起生成exe文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MATXP</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MBTX</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"MBTXTEST"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>VS2015 开发人员命令 dumpbin /all main.obj &gt; main.txt</li><li>main.txt COFF格式，通用对象文件格式</li><li>main.txt没有MBTX::MBTX 默认构造函数</li></ul><hr><ul><li>合成构造函数</li><li><strong>Condition1:</strong><ul><li>*<em>该MBTX类没有任何构造函数，但包含一个类对象成员，而该对象所属的类有一个缺省的构造函数，为了调用MATX的默认构造函数，为MBTX生成一个合成默认构造函数 *</em></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MATX</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MATX() &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"MATX"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MBTX</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">MATX ma;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"MBTXTEST"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                                               Symbol    Symbol</span><br><span class="line">Offset    Type              Applied To         Index     Name</span><br><span class="line">--------  ----------------  -----------------  --------  ------</span><br><span class="line"><span class="number">0000002</span>A  REL32                      <span class="number">00000000</span>        <span class="number">8</span>D  ??<span class="number">0</span>MATX@@QAE@XZ (<span class="keyword">public</span>: __thiscall MATX::MATX(<span class="keyword">void</span>))</span><br><span class="line"><span class="number">00000035</span>  REL32                      <span class="number">00000000</span>        <span class="number">90</span>  ??<span class="number">0</span>M0TX@@QAE@XZ (<span class="keyword">public</span>: __thiscall M0TX::M0TX(<span class="keyword">void</span>))</span><br><span class="line"><span class="number">00000048</span>  REL32                      <span class="number">00000000</span>        <span class="number">9</span>A  __RTC_CheckEsp</span><br></pre></td></tr></table></figure><ul><li><p>先定义MATX，先调用MATX构造函数</p></li><li><p><strong>Condition2</strong></p><ul><li><strong>一个父类带缺省构造函数，子类没有任何构造函数，这个缺省的构造函数要被调用，编译器会为这个子类合成出一个默认构造函数，合成目的，为了调用父类的构造函数</strong></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MTX_BASE</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MTX_BASE()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"MTX_BASE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MTX_CHILD</span> :</span><span class="keyword">public</span> MTX_BASE&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_i;</span><br><span class="line"><span class="keyword">int</span> m_j;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60501020</span> flags</span><br><span class="line">         Code</span><br><span class="line">         COMDAT; sym= <span class="string">"public: __thiscall MTX_CHILD::MTX_CHILD(void)"</span> (??<span class="number">0</span>MTX_CHILD@@QAE@XZ)</span><br><span class="line">         <span class="number">16</span> byte align</span><br><span class="line">         Execute Read</span><br></pre></td></tr></table></figure><ul><li>Condition3:<ul><li>如果一个类有虚函数，没有构造函数时</li><li>虚函数存在，编译器生成虚函数表VTBL，在合成构造函数里，把类的虚函数表地址，赋值给类对象的虚函数表指针。（赋值语句）</li><li>MTX_CHILD2有父类，有缺省构造函数<ul><li>生成MTX_CHILD2的虚函数表vftable</li><li>调用父类的构造函数</li><li>将MTX_CHILD2类的虚函数表地址赋值给MTX_CHILD2类对象的虚函数表指针</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MTX_CHILD2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"MTX_CHILD2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60501020</span> flags</span><br><span class="line">         Code</span><br><span class="line">         COMDAT; sym= <span class="string">"public: __thiscall MTX_CHILD2::MTX_CHILD2(void)"</span> (??<span class="number">0</span>MTX_CHILD2@@QAE@XZ)</span><br><span class="line">         <span class="number">16</span> byte align</span><br><span class="line">         Execute Read</span><br><span class="line"></span><br><span class="line">RAW DATA #<span class="number">9</span></span><br><span class="line">  <span class="number">00000000</span>: <span class="number">55</span> <span class="number">8B</span> EC <span class="number">81</span> EC CC <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">53</span> <span class="number">56</span> <span class="number">57</span> <span class="number">51</span> <span class="number">8</span>D BD <span class="number">34</span>  U.¨¬.¨¬¨¬...SVWQ.?<span class="number">4</span></span><br><span class="line">  <span class="number">00000010</span>: FF FF FF B9 <span class="number">33</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> B8 CC CC CC CC F3 AB <span class="number">59</span>  ???<span class="number">13.</span>..?¨¬¨¬¨¬¨¬¨®?Y</span><br><span class="line">  <span class="number">00000020</span>: <span class="number">89</span> <span class="number">4</span>D F8 <span class="number">8B</span> <span class="number">45</span> F8 C7 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">8B</span> <span class="number">45</span> F8 <span class="number">5F</span>  .M?.E??......E?_</span><br><span class="line">  <span class="number">00000030</span>: <span class="number">5</span>E <span class="number">5B</span> <span class="number">8B</span> E5 <span class="number">5</span>D C3                                ^[.?]?</span><br><span class="line"></span><br><span class="line">RELOCATIONS #<span class="number">9</span></span><br><span class="line">                                                Symbol    Symbol</span><br><span class="line"> Offset    Type              Applied To         Index     Name</span><br><span class="line"> --------  ----------------  -----------------  --------  ------</span><br><span class="line"> <span class="number">00000028</span>  DIR32                      <span class="number">00000000</span>        C2  ??_7MTX_CHILD2@@<span class="number">6B</span>@ (<span class="keyword">const</span> MTX_CHILD2::`vftable')<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MTX_CHILD2</span>:</span><span class="keyword">public</span> MTX_BASE &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_i;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"MTX_CHILD2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">MTX_CHILD2()</span><br><span class="line">&#123;</span><br><span class="line">m_i = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Offset    Type              Applied To         Index     Name</span><br><span class="line">--------  ----------------  -----------------  --------  ------</span><br><span class="line"><span class="number">0000002</span>A  REL32                      <span class="number">00000000</span>        <span class="number">8</span>E  ??<span class="number">0</span>MTX_BASE@@QAE@XZ (<span class="keyword">public</span>: __thiscall MTX_BASE::MTX_BASE(<span class="keyword">void</span>))</span><br><span class="line"><span class="number">00000033</span>  DIR32                      <span class="number">00000000</span>        CD  ??_7MTX_CHILD2@@<span class="number">6B</span>@ (<span class="keyword">const</span> MTX_CHILD2::`vftable')</span><br><span class="line"><span class="number">00000050</span>  REL32                      <span class="number">00000000</span>        <span class="number">9B</span>  __RTC_CheckEsp</span><br></pre></td></tr></table></figure><ul><li><strong>Condition4</strong><ul><li>一个类带有虚基类，编译器也会合成默认构造函数</li><li>虚基类，通过两个直接基类继承同一个间接基类。</li><li>vbtable 虚基类表 vftable虚函数表</li><li></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GRAND</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PARENT1</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> GRAND &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PARENT2</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> GRAND &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CHILD</span> :</span><span class="keyword">public</span> PARENT1, <span class="keyword">public</span> PARENT2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60501020</span> flags</span><br><span class="line">         Code</span><br><span class="line">         COMDAT; sym= <span class="string">"public: __thiscall CHILD::CHILD(void)"</span> (??<span class="number">0</span>CHILD@@QAE@XZ)</span><br><span class="line">         <span class="number">16</span> byte align</span><br><span class="line">         Execute Read</span><br><span class="line"> Offset    Type              Applied To         Index     Name</span><br><span class="line"> --------  ----------------  -----------------  --------  ------</span><br><span class="line"> <span class="number">0000002</span>E  DIR32                      <span class="number">00000000</span>        <span class="number">49</span>  ??_8CHILD@@<span class="number">7B</span>PARENT1@@@ (<span class="keyword">const</span> CHILD::`vbtable'&#123;<span class="keyword">for</span> `PARENT1'&#125;)</span><br><span class="line"> <span class="number">00000038</span>  DIR32                      <span class="number">00000000</span>        <span class="number">4</span>D  ??_8CHILD@@<span class="number">7B</span>PARENT2@@@ (<span class="keyword">const</span> CHILD::`vbtable'&#123;<span class="keyword">for</span> `PARENT2'&#125;)</span><br><span class="line"> <span class="number">00000042</span>  REL32                      <span class="number">00000000</span>        <span class="number">32</span>  ??<span class="number">0</span>PARENT1@@QAE@XZ (<span class="keyword">public</span>: __thiscall PARENT1::PARENT1(<span class="keyword">void</span>))</span><br><span class="line"> <span class="number">0000004F</span>  REL32                      <span class="number">00000000</span>        <span class="number">33</span>  ??<span class="number">0</span>PARENT2@@QAE@XZ (<span class="keyword">public</span>: __thiscall PARENT2::PARENT2(<span class="keyword">void</span>))</span><br><span class="line"> <span class="number">00000062</span>  REL32                      <span class="number">00000000</span>        <span class="number">38</span>  __RTC_CheckEsp</span><br></pre></td></tr></table></figure><h2 id="7-拷贝构造函数语义"><a href="#7-拷贝构造函数语义" class="headerlink" title="7. 拷贝构造函数语义"></a>7. 拷贝构造函数语义</h2><ul><li>传统上，没有定义一个拷贝构造，编译器会在必要时，提供合成的拷贝构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line">A mya1;</span><br><span class="line">mya1.m_num = <span class="number">13</span>;</span><br><span class="line">A mya2 = mya1;</span><br></pre></td></tr></table></figure><ul><li>上述没有合成拷贝构造函数，编译器内部成员变量初始化，直接按值拷贝</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> mb_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">int</span> ma_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A mya1;</span><br><span class="line">mya1.ma_num = <span class="number">13</span>;</span><br><span class="line">mya1.b.mb_num = <span class="number">7</span>;</span><br><span class="line">A mya2 = mya1;</span><br></pre></td></tr></table></figure><ul><li>上述没有合成拷贝构造函数</li><li>A mya2 = mya1; 拷贝构造一个对象，编译器直接拷贝数据，如果A中有类对象类型变量，类似递归式拷贝类B中成员变量。</li></ul><p>编译器合成拷贝构造函数，什么时候，干什么</p><ul><li><strong>Condition1</strong><ul><li>类A没有拷贝构造，含有一个类对象类型的成员变量，其有拷贝构造函数，当代码有涉及A的拷贝构造时</li><li>B中定义拷贝构造时，也需要默认构造</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> mb_num;</span><br><span class="line">B(<span class="keyword">const</span> B&amp; B_)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"B copy construct"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">B()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">int</span> ma_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A mya1;</span><br><span class="line">mya1.ma_num = <span class="number">13</span>;</span><br><span class="line">mya1.b.mb_num = <span class="number">7</span>;</span><br><span class="line">A mya2 = mya1;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60501020</span> flags</span><br><span class="line">         Code</span><br><span class="line">         COMDAT; sym= <span class="string">"public: __thiscall A::A(class A const &amp;)"</span> (??<span class="number">0</span>A@@QAE@ABV0@@Z)</span><br><span class="line">         <span class="number">16</span> byte align</span><br><span class="line">         Execute Read</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++,object_model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-hexo-blog</title>
      <link href="/2019/07/13/hello-hexo-blog/"/>
      <url>/2019/07/13/hello-hexo-blog/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="This-is-a-hexo-blog-test"><a href="#This-is-a-hexo-blog-test" class="headerlink" title="This is a hexo blog test"></a>This is a hexo blog test</h2><p><img src="%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190625195218.jpg" alt="markdown img test"></p><img src="/2019/07/13/hello-hexo-blog/微信图片_20190625195218.jpg" title="hexo img test"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1366330017&auto=1&height=66"></iframe></contents>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/13/hello-world/"/>
      <url>/2019/07/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
